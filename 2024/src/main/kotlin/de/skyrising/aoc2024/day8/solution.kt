package de.skyrising.aoc2024.day8

import de.skyrising.aoc.*

val test = TestInput("""
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
""")

fun solve(grid: CharGrid, offsets: Iterable<Int>): Int {
    return grid.where { it != '.' }.pairs().flatMapTo(mutableSetOf()) { (a, b) ->
        if (grid[a] != grid[b]) return@flatMapTo emptyList()
        val diff = b - a
        offsets.mapNotNull { i -> (a + i * diff).takeIf { it in grid } }
    }.size
}

@PuzzleName("Resonant Collinearity")
fun PuzzleInput.part1() = solve(charGrid, listOf(-1, 2))

fun PuzzleInput.part2(): Int {
    val grid = charGrid
    val size = maxOf(grid.size.x, grid.size.y)
    return solve(grid, -size..size)
}
